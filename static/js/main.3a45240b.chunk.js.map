{"version":3,"sources":["components/TodoInput.js","actions/todos.js","components/TodoList.js","App.js","reducers/todo.js","reducers/index.js","configureStore.js","serviceWorker.js","index.js"],"names":["TodoInput","dispatch","useDispatch","todo","setTodo","useState","React","createElement","onSubmit","e","preventDefault","newTodo","trim","id","uuid","name","complete","type","payload","addTodoAction","className","onChange","_ref","target","value","placeholder","TodoList","todos","useSelector","state","map","key","checked","todoId","toggleTodoAction","onClick","deleteTodoAction","App","initialState","arguments","length","undefined","action","_objectSpread","filter","createRootReducer","history","combineReducers","router","connectRouter","createBrowserHistory","middleware","logger","thunk","routerMiddleware","composedEnhancers","compose","applyMiddleware","createStore","Boolean","window","location","hostname","match","ReactDOM","render","Provider","store","ConnectedRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a45240b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport uuid from \"uuid/v4\";\nimport { useDispatch } from \"react-redux\";\nimport { addTodoAction } from \"../actions/todos\";\n\nconst TodoInput = () => {\n  const dispatch = useDispatch();\n  const [todo, setTodo] = useState(\"\");\n\n  const addTodo = newTodo => dispatch(addTodoAction(newTodo));\n\n  const onChange = ({ target }) => {\n    setTodo(target.value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const isTodoBlank = todo.trim() === \"\";\n\n    if (isTodoBlank) {\n      return;\n    }\n\n    addTodo({\n      id: uuid(),\n      name: todo,\n      complete: false,\n    });\n\n    setTodo(\"\");\n  };\n\n  return (\n    <form {...{ onSubmit }}>\n      <div className=\"form-div\">\n        <input\n          name=\"todo\"\n          onChange={onChange}\n          placeholder=\"Add a todo\"\n          type=\"text\"\n          value={todo}\n        />\n        <button type=\"submit\">Add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default TodoInput;\n","export const ADD_TODO = \"ADD_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\n\nexport const addTodoAction = todo => ({\n  type: ADD_TODO,\n  payload: todo,\n});\n\nexport const toggleTodoAction = todoId => ({\n  type: TOGGLE_TODO,\n  payload: todoId,\n});\n\nexport const deleteTodoAction = todoId => ({\n  type: DELETE_TODO,\n  payload: todoId,\n});\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { toggleTodoAction, deleteTodoAction } from \"../actions/todos\";\n\nconst TodoList = () => {\n  const { todos } = useSelector(state => {\n    return state.todos;\n  });\n\n  const dispatch = useDispatch();\n\n  const toggleTodo = todoId => dispatch(toggleTodoAction(todoId));\n  const deleteTodo = todoId => dispatch(deleteTodoAction(todoId));\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(({ id, complete, name }) => (\n        <li key={id}>\n          <input\n            checked={complete}\n            onChange={() => {\n              toggleTodo(id);\n            }}\n            type=\"checkbox\"\n          />\n          <span className={complete ? \"complete\" : null}>{name}</span>\n          <button\n            className=\"delete-button\"\n            onClick={() => {\n              deleteTodo(id);\n            }}\n            type=\"button\"\n          >\n            X\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default TodoList;\n","import React from \"react\";\nimport \"./App.css\";\n\n// Inputs\nimport TodoInput from \"./components/TodoInput\";\nimport TodoList from \"./components/TodoList\";\n\nconst App = () => {\n  return (\n    <div className=\"main\">\n      <TodoInput />\n      <TodoList />\n    </div>\n  );\n};\n\nexport default App;\n","import uuid from \"uuid/v4\";\nimport { ADD_TODO, TOGGLE_TODO, DELETE_TODO } from \"../actions/todos\";\n\nconst initialState = {\n  todos: [\n    {\n      id: uuid(),\n      name: \"Read a bit\",\n      complete: true,\n    },\n    {\n      id: uuid(),\n      name: \"Do laundry\",\n      complete: false,\n    },\n  ],\n};\n\nconst todos = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n    case TOGGLE_TODO:\n      return {\n        ...state,\n        todos: state.todos.map(todo =>\n          todo.id === action.payload\n            ? { ...todo, complete: !todo.complete }\n            : todo\n        ),\n      };\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default todos;\n","import { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\n\n// Reducers\nimport todos from \"./todo\";\n\nconst createRootReducer = history =>\n  combineReducers({\n    router: connectRouter(history),\n    todos,\n  });\n\nexport default createRootReducer;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport logger from \"redux-logger\";\nimport { createBrowserHistory } from \"history\";\n\nimport { routerMiddleware } from \"connected-react-router\";\nimport thunk from \"redux-thunk\";\n\nimport createRootReducer from \"./reducers\";\n\nexport const history = createBrowserHistory();\n\nconst initialState = {};\n\nconst enhancers = [];\nconst middleware = [logger, thunk, routerMiddleware(history)];\n\nif (process.env.NODE_ENV === \"development\") {\n  // eslint-disable-next-line no-underscore-dangle\n  const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__;\n\n  if (typeof devToolsExtension === \"function\") {\n    enhancers.push(devToolsExtension());\n  }\n}\n\nconst composedEnhancers = compose(applyMiddleware(...middleware), ...enhancers);\n\nexport default createStore(\n  createRootReducer(history), // root reducer with router state\n  initialState,\n  composedEnhancers\n);\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nconst registerValidSW = (swUrl, config) => {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n};\n\nconst checkValidServiceWorker = (swUrl, config) => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n};\n\nexport const register = config => {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\n\nexport const unregister = () => {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport App from \"./App\";\nimport store, { history } from \"./configureStore\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider {...{ store }}>\n    <ConnectedRouter {...{ history }}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}